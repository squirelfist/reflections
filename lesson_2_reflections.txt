What happens when you initialize a repository? Why do you need to do it?

- Git creates the .git folder and establishes the current directory 
as a Git Repository
-Git does not, however, create a commit for you automatically
you have to make the first commit yourself
-you need to do it to et Git know that the directory should be treated as
a repository and to enable version control and commits

How is the staging area different from the working directory and the repository? What value do you think it offers?
-the staging area is a (possibly logical) contruct that houses the files in the working directory
that are meant to be added to a repository using a commit
-it is of benefit as it allows greater control and flexibility when choosing which files constitute a logical change
and thus are eligible to be grouped together as a commit; rather than simply adding all files all the time

How can you use the staging area to make sure you have one commit per logical change?

-The staging area allows you to control which files are added to the final commit, therefore you
can control which files constitute a logical stage and make sure only those files are
changed in the commit

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

-Branches assist in keeping track of parallel changes that are an offshoot of the main idea, project or product
-A branch can signify a new experimental idea, and alternate verion such as a new language, etc

How do the diagrams help you visualize the branch structure?

-you can see the parenting structure of how each commit relates to another commit and to its branch

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?

-manual would take too much time plus automatic brings conflicts to you attention.